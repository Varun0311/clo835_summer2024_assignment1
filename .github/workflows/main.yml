name: CI/CD Pipeline for Docker to ECR

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        id: login-ecr 
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1

      - name: Create ECR Repositories if not exist
        run: |
          aws ecr describe-repositories --repository-names my_db || \
          aws ecr create-repository --repository-name my_db

          aws ecr describe-repositories --repository-names my_app || \
          aws ecr create-repository --repository-name my_app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build MySQL Docker image
        run: |
          docker build -t my_db -f Dockerfile_mysql .

      - name: Build Application Docker image
        run: |
          docker build -t my_app -f Dockerfile .

      - name: Tag MySQL Docker image
        run: |
          docker tag my_db:latest ${{ secrets.ECR_REGISTRY }}/my_db:latest

      - name: Tag Application Docker image
        run: |
          docker tag my_app:latest ${{ secrets.ECR_REGISTRY }}/my_app:latest

      - name: Push MySQL Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/my_db:latest

      - name: Push Application Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/my_app:latest

      - name: Run MySQL container and get IP
        id: run_mysql
        run: |
          # Run MySQL container
          docker run -d --name mysql_db -e MYSQL_ROOT_PASSWORD=pw my_db

          # Get the IP address of the MySQL container
          MYSQL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql_db)
          echo "MYSQL_IP=$MYSQL_IP" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          echo "DBHOST=${{ env.MYSQL_IP }}" >> $GITHUB_ENV
          echo "DBPORT=3306" >> $GITHUB_ENV
          echo "DBUSER=root" >> $GITHUB_ENV
          echo "DATABASE=employees" >> $GITHUB_ENV
          echo "DBPWD=pw" >> $GITHUB_ENV
          echo "APP_COLOR=blue" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Optional
          aws-region: us-east-1

      - name: Run SSH commands to deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # Pull the latest Docker images
            sudo docker pull ${{ secrets.ECR_REGISTRY }}/my_db:latest
            sudo docker pull ${{ secrets.ECR_REGISTRY }}/my_app:latest

            # Stop existing containers if they are running
            sudo docker stop mysql_db || true
            sudo docker rm mysql_db || true
            sudo docker stop my_app_container || true
            sudo docker rm my_app_container || true

            # Run the MySQL container
            sudo docker run -d --name mysql_db -e MYSQL_ROOT_PASSWORD=pw ${{ secrets.ECR_REGISTRY }}/my_db:latest

            # Run the application container
            sudo docker run -d --name my_app_container \
              -e DBHOST=127.0.0.1 \  # Change this to the actual IP if needed
              -e DBPORT=3306 \
              -e DBUSER=root \
              -e DATABASE=employees \
              -e DBPWD=pw \
              -e APP_COLOR=blue \
              -p 80:80 ${{ secrets.ECR_REGISTRY }}/my_app:latest
          EOF
